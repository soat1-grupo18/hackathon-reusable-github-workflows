name: Reusable - AWS ECS Java Microservice

on:
  workflow_call:
    inputs:
      application-path:
        required: true
        type: string
      aws-region:
        required: true
        type: string
      container-name:
        required: true
        type: string
      container-port:
        required: true
        type: number
      ecs-cluster-name:
        required: true
        type: string
      ecr-repository-name:
        required: true
        type: string
      ecs-service-name:
        required: true
        type: string
      ecs-task-definition-file:
        required: false
        type: string
        default: task-definition.json
      java-distribution:
        required: true
        type: string
      java-version:
        required: true
        type: string

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: ${{ inputs.java-distribution }}
          java-version: ${{ inputs.java-version }}

      - name: Build application
        working-directory: ${{ inputs.application-path }}
        run: mvn clean compile

      - name: Run tests
        working-directory: ${{ inputs.application-path }}
        run: mvn test --batch-mode --fail-at-end

      - name: Package application
        working-directory: ${{ inputs.application-path }}
        run: mvn package

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::289389227463:role/github-org-soat1-grupo18
          aws-region: ${{ inputs.aws-region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        id: build-image
        working-directory: ${{ inputs.app-path }}
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr-repository-name }}:${{ github.sha }} .
          echo "image=${{ steps.login-ecr.outputs.registry }}/${{ inputs.ecr-repository-name }}:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Push Docker image
        run: |
          docker push ${{ steps.build-image.outputs.image }}
          
  deploy:
    name: Deploy
    environment: production
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::289389227463:role/github-org-soat1-grupo18
          aws-region: us-east-1

      - name: Get task definition
        id: get-task-definition
        run: |
          aws ecs describe-task-definition \
            --task-definition "${{ inputs.ecs-service-name }}" \
            --query taskDefinition > "${{ inputs.ecs-task-definition-file }}"

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_FILE }}
          container-name: ${{ inputs.container-name }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Print task definition
        id: print-task-definition
        env:
          TASK_DEFINITION_PATH: ${{ steps.task-def.outputs.task-definition }}
        run: |
          cat "$TASK_DEFINITION_PATH"

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ inputs.ecs-cluster-name }}
          wait-for-service-stability: true
